#pragma kernel Sort
#pragma kernel CalculateOffsets

struct Entry
{
	uint originalIndex;
	uint hash;
	uint key;
};

RWStructuredBuffer<Entry> Entries;
const uint numEntries;
const uint groupWidth;
const uint groupHeight;
const uint stepIndex;

// Sort the given entries by their keys (smallest to largest)
// This is done using bitonic merge sort, and takes multiple iterations
[numthreads(128, 1, 1)]
void Sort (uint3 id : SV_DispatchThreadID)
{
	uint i = id.x;

	uint hIndex = i & (groupWidth - 1);
	uint indexLeft = hIndex + (groupHeight + 1) * (i / groupWidth);
	uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
	uint indexRight = indexLeft + rightStepSize;

	// Exit if out of bounds (for non-power of 2 input sizes)
	if (indexRight >= numEntries) return;

	uint valueLeft = Entries[indexLeft].key;
	uint valueRight = Entries[indexRight].key;

	// Swap entries if value is descending
	if (valueLeft > valueRight)
	{
		Entry temp = Entries[indexLeft];
		Entries[indexLeft] = Entries[indexRight];
		Entries[indexRight] = temp;
	}
}

// Calculate offsets into the sorted Entries buffer (used for spatial hashing).
// For example, given an Entries buffer sorted by key like so: {2, 2, 2, 3, 6, 6, 9, 9, 9, 9}
// The resulting Offsets calculated here should be:            {-, -, 0, 3, -, -, 4, -, -, 6}
// (where '-' represents elements that won't be read/written)
// 
// Usage example:
// Say we have a particular particle P, and we want to know which particles are in the same grid cell as it.
// First we would calculate the Key of P based on its position. Let's say in this example that Key = 9.
// Next we can look up Offsets[Key] to get: Offsets[9] = 6
// This tells us that SortedEntries[6] is the first particle that's in the same cell as P.
// We can then loop until we reach a particle with a different cell key in order to iterate over all the particles in the cell.
// 
// NOTE: offsets buffer must filled with values equal to (or greater than) its length to ensure that this works correctly
RWStructuredBuffer<uint> Offsets;

[numthreads(128, 1, 1)]
void CalculateOffsets(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numEntries) { return; }

	uint i = id.x;
	uint null = numEntries;

	uint key = Entries[i].key;
	uint keyPrev = i == 0 ? null : Entries[i - 1].key;

	if (key != keyPrev)
	{
		Offsets[key] = i;
	}
}